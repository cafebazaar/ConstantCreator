package com.farsitel.bazaar.constantcreator.enum

import com.farsitel.bazaar.constantcreator.annotation.HasEnumConstant
import com.google.devtools.ksp.KspExperimental
import com.google.devtools.ksp.getAnnotationsByType
import com.google.devtools.ksp.symbol.ClassKind
import com.google.devtools.ksp.symbol.KSClassDeclaration
import com.google.devtools.ksp.symbol.KSNode
import com.google.devtools.ksp.visitor.KSEmptyVisitor
import com.squareup.kotlinpoet.ClassName
import com.squareup.kotlinpoet.FileSpec
import com.squareup.kotlinpoet.FunSpec
import com.squareup.kotlinpoet.PropertySpec
import com.squareup.kotlinpoet.TypeSpec
import com.squareup.kotlinpoet.ksp.KotlinPoetKspPreview
import javax.annotation.processing.Generated

internal class AnnotationVisitor : KSEmptyVisitor<Unit, Sequence<EnumClass>>() {

    private val enums = mutableListOf<EnumClass>()

    @OptIn(KspExperimental::class)
    override fun visitClassDeclaration(
        classDeclaration: KSClassDeclaration, data: Unit
    ): Sequence<EnumClass> {
        if (classDeclaration.classKind == ClassKind.ANNOTATION_CLASS) {
            return classDeclaration.getAnnotationsByType(HasEnumConstant::class)
                .map { hasEnumConstant ->
                    enums.find(hasEnumConstant.enumClassName)
                        ?: create(classDeclaration, hasEnumConstant)
                }
        }

        return super.visitDeclaration(classDeclaration, data)
    }

    override fun defaultHandler(node: KSNode, data: Unit): Sequence<EnumClass> = emptySequence()

    private fun create(annotation: KSClassDeclaration, hasEnumConstant: HasEnumConstant): EnumClass {
        val enumClass = hasEnumConstant.generateEnumClass(annotation)
        enums.add(enumClass)
        return enumClass
    }

    @OptIn(KotlinPoetKspPreview::class)
    private fun HasEnumConstant.generateEnumClass(annotation: KSClassDeclaration): EnumClass {
        val enumClassName = ClassName(
            packageName = annotation.packageName.asString(),
            enumClassName
        )

        val enumBuilder = TypeSpec.enumBuilder(enumClassName)
            .apply {
                if (hasValue) {
                    primaryConstructor(
                        FunSpec.constructorBuilder().addParameter(valueName, Int::class).build()
                    )
                    addProperty(
                        PropertySpec.builder(valueName, Int::class).initializer(valueName).build()
                    )
                }
            }

        val fileBuilder = FileSpec.builder(
            packageName = annotation.packageName.asString(),
            fileName = this.enumClassName
        )
            .addFileComment("Generated by Constant-Creator")
            .addAnnotation(Generated::class)
        return EnumClass(fileBuilder, enumBuilder, this)
    }
}

private fun List<EnumClass>.find(className: String): EnumClass? {
    return find { it.fileBuilder.name == className }
}
