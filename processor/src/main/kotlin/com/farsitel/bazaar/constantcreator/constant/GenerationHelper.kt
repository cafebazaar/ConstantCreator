package com.farsitel.bazaar.constantcreator.constant

import com.farsitel.bazaar.constantcreator.LIBRARY_PACKAGE_NAME
import com.squareup.kotlinpoet.FileSpec
import com.squareup.kotlinpoet.KModifier
import com.squareup.kotlinpoet.PropertySpec
import java.util.Locale
import javax.annotation.processing.Generated

internal class GenerationHelper(
    val fileBuilder: FileSpec.Builder,
    constantsFromDependencies: Set<Int>
) {

    private var valueSet = constantsFromDependencies.toMutableSet()

    internal fun getValueFor(uniqueClassName: String): Int {
        var value = uniqueClassName.hashCode()
        while (true) {
            if (valueSet.contains(value)) {
                value++
            } else {
                valueSet.add(value)
                return value
            }
        }
    }

    companion object {

        fun createGenerationHelper(
            constantsFromDependencies: Set<Int>,
            projectPath: String
        ): GenerationHelper {
            val fileBuilder = FileSpec.builder(
                packageName = LIBRARY_PACKAGE_NAME,
                fileName =
                projectPath
                    .replace(":", "")
                    .replaceFirstChar { it.titlecase(Locale.getDefault()) }
                    + "Constants"
            )
                .addFileComment("Generated by Constant-Creator")
                .addAnnotation(Generated::class)
                .apply {
                    // Temporary solution until getConstantValue equivalent implemented in ksp
                    constantsFromDependencies.forEach {
                        addProperty(
                            PropertySpec.builder(
                                it.toString(), Int::class, KModifier.CONST, KModifier.PRIVATE
                            ).initializer("%L", it)
                                .build()
                        )
                    }
                }
            return GenerationHelper(fileBuilder, constantsFromDependencies)
        }
    }
}
